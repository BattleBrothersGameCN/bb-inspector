// This file is automatically generated from CSSProperties.json by the process-css-properties.py script. Do not edit it.

#pragma once

#include "CSSPropertyNames.h"
#include "CSSValueKeywords.h"

namespace WebCore {

struct CSSParserContext;
class CSSParserTokenRange;
class CSSValue;

struct CSSPropertyParsing {
    // Parse and return a single longhand style property.
    static RefPtr<CSSValue> parseStyleProperty(CSSParserTokenRange&, CSSPropertyID id, CSSPropertyID currentShorthand, const CSSParserContext&);
    // Fast path bare-keyword support.
    static bool isKeywordValidForStyleProperty(CSSPropertyID, CSSValueID, const CSSParserContext&);
    static bool isKeywordFastPathEligibleStyleProperty(CSSPropertyID);

    // Parse and return a single longhand @counter-style descriptor.
    static RefPtr<CSSValue> parseCounterStyleDescriptor(CSSParserTokenRange&, CSSPropertyID id, const CSSParserContext&);
    // Fast path bare-keyword support.
    static bool isKeywordValidForCounterStyleDescriptor(CSSPropertyID, CSSValueID, const CSSParserContext&);
    static bool isKeywordFastPathEligibleCounterStyleDescriptor(CSSPropertyID);

    // Parse and return a single longhand @font-face descriptor.
    static RefPtr<CSSValue> parseFontFaceDescriptor(CSSParserTokenRange&, CSSPropertyID id, const CSSParserContext&);
    // Fast path bare-keyword support.
    static bool isKeywordValidForFontFaceDescriptor(CSSPropertyID, CSSValueID, const CSSParserContext&);
    static bool isKeywordFastPathEligibleFontFaceDescriptor(CSSPropertyID);

    // Parse and return a single longhand @font-palette-values descriptor.
    static RefPtr<CSSValue> parseFontPaletteValuesDescriptor(CSSParserTokenRange&, CSSPropertyID id, const CSSParserContext&);
    // Fast path bare-keyword support.
    static bool isKeywordValidForFontPaletteValuesDescriptor(CSSPropertyID, CSSValueID, const CSSParserContext&);
    static bool isKeywordFastPathEligibleFontPaletteValuesDescriptor(CSSPropertyID);

    // Parse and return a single longhand @property descriptor.
    static RefPtr<CSSValue> parsePropertyDescriptor(CSSParserTokenRange&, CSSPropertyID id, const CSSParserContext&);
    // Fast path bare-keyword support.
    static bool isKeywordValidForPropertyDescriptor(CSSPropertyID, CSSValueID, const CSSParserContext&);
    static bool isKeywordFastPathEligiblePropertyDescriptor(CSSPropertyID);

    // Direct consumers.

    // Exported style property consumers.
    static RefPtr<CSSValue> consumeFontSize(CSSParserTokenRange&, const CSSParserContext&);
    static RefPtr<CSSValue> consumeFontVariantCaps(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeFontVariantEmoji(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeFontVariantPosition(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeColumnCount(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeColumnGap(CSSParserTokenRange&, const CSSParserContext&);
    static RefPtr<CSSValue> consumeColumnWidth(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeLineHeight(CSSParserTokenRange&, const CSSParserContext&);
    static RefPtr<CSSValue> consumePerspective(CSSParserTokenRange&, const CSSParserContext&);
    static RefPtr<CSSValue> consumeRowGap(CSSParserTokenRange&, const CSSParserContext&);
    static RefPtr<CSSValue> consumeScrollTimelineAxis(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeScrollTimelineName(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeTextWrapMode(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeTextWrapStyle(CSSParserTokenRange&, const CSSParserContext&);
    static RefPtr<CSSValue> consumeViewTimelineAxis(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeViewTimelineName(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeWhiteSpaceCollapse(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeOverscrollBehaviorX(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeOverscrollBehaviorY(CSSParserTokenRange&);

    // Exported @font-face descriptor consumers.
    static RefPtr<CSSValue> consumeFontFaceFontDisplay(CSSParserTokenRange&);

    // Exported shared consumers.
    static RefPtr<CSSValue> consumeAnchorSide(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeAxis(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeGeometryBox(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeLineWidth(CSSParserTokenRange&, const CSSParserContext&);
    static RefPtr<CSSValue> consumePageSize(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeScroller(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeShapeBox(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeSingleAnimationComposition(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeSingleAnimationDirection(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeSingleAnimationFillMode(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeSingleAnimationIterationCount(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeSingleAnimationName(CSSParserTokenRange&, const CSSParserContext&);
    static RefPtr<CSSValue> consumeSingleAnimationPlayState(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeSingleBackgroundAttachment(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeSingleBackgroundBlendMode(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeSingleBackgroundClip(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeSingleBackgroundImage(CSSParserTokenRange&, const CSSParserContext&);
    static RefPtr<CSSValue> consumeSingleBackgroundOrigin(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeSingleBackgroundPositionX(CSSParserTokenRange&, const CSSParserContext&);
    static RefPtr<CSSValue> consumeSingleBackgroundPositionY(CSSParserTokenRange&, const CSSParserContext&);
    static RefPtr<CSSValue> consumeSingleBackgroundRepeat(CSSParserTokenRange&, const CSSParserContext&);
    static RefPtr<CSSValue> consumeSingleMaskClip(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeSingleMaskComposite(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeSingleMaskImage(CSSParserTokenRange&, const CSSParserContext&);
    static RefPtr<CSSValue> consumeSingleMaskMode(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeSingleMaskOrigin(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeSingleMaskRepeat(CSSParserTokenRange&, const CSSParserContext&);
    static RefPtr<CSSValue> consumeSingleScrollTimelineName(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeSingleViewTimelineInset(CSSParserTokenRange&, const CSSParserContext&);
    static RefPtr<CSSValue> consumeSingleWebkitBackgroundClip(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeSingleWebkitBackgroundOrigin(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeSingleWebkitMaskClip(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeSingleWebkitMaskComposite(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeSingleWebkitMaskPositionX(CSSParserTokenRange&, const CSSParserContext&);
    static RefPtr<CSSValue> consumeSingleWebkitMaskPositionY(CSSParserTokenRange&, const CSSParserContext&);
    static RefPtr<CSSValue> consumeSingleWebkitMaskSourceType(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeTransitionBehaviorValue(CSSParserTokenRange&);
    static RefPtr<CSSValue> consumeWidthOrHeight(CSSParserTokenRange&, const CSSParserContext&);
};

} // namespace WebCore
